from sqlalchemy import create_engine, Column, Integer, String, Float, ForeignKey
from sqlalchemy.exc import OperationalError
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
from dotenv import load_dotenv
from config_data.config import Config, load_config
from aiogram.types import Message, CallbackQuery
import os

load_dotenv()
config: Config = load_config()

Base = declarative_base()

engine = create_engine(config.tg_bot.database_url)
Session = sessionmaker(bind=engine)
session = Session()


class Products(Base):
    """
    –†–∞–∑–º–µ—Ä—ã –±–∞–Ω–Ω–µ—Ä–∞
    """
    __tablename__ = 'products'
    id = Column(Integer, primary_key=True)
    banner_type = Column(String, nullable=False)
    size = Column(String, nullable=False)
    product_name = Column(String, unique=True, nullable=False)
    price = Column(Float, nullable=False)


async def initialize_products_table():
    """
    –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –±–∞–Ω–Ω–µ—Ä–æ–≤ 
    """
    os.path.join('')
    if not os.path.join(os.getcwd(), 'shop.db'):
        print('–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞—é –∑–∞–Ω–æ–≤–æ...')
    try:
        Base.metadata.create_all(engine)
        print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.')
    except OperationalError as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}')
    if not session.query(Products).first():
        session.add_all([
            Products(
                banner_type='–ö–∏—Ç–∞–π',
                size='3x6',
                product_name='–ö–∏—Ç–∞–π - 3x6',
                price=100.0
            ),
            Products(
                banner_type='–ö–∏—Ç–∞–π',
                size='4x6',
                product_name='–ö–∏—Ç–∞–π - 4x6',
                price=200.0
            ),
            Products(
                banner_type='–ï–≤—Ä–æ–ø–∞',
                size='3x6',
                product_name='–ï–≤—Ä–æ–ø–∞ - 3x6',
                price=150.0
            ),
            Products(
                banner_type='–ï–≤—Ä–æ–ø–∞',
                size='4x6',
                product_name='–ï–≤—Ä–æ–ø–∞ - 4x6',
                price=300.0
            ),
        ])
        session.commit()


async def get_banner_size_and_price_from_products_table(banner_type: str):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Products.
    :return: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Ü–µ–Ω—ã –Ω–∞ –±–∞–Ω–Ω–µ—Ä.
    """
    try:
        data = session.query(Products.size, Products.price).filter(
            Products.banner_type == banner_type).all()
        return data
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}')
        return []


async def get_banner_name_from_products_table(banner_type: str):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Products.
    :return: –°–ø–∏—Å–æ–∫ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –±–∞–Ω–Ω–µ—Ä–æ–≤.
    """
    try:
        product_names = session.query(Products.product_name).filter(
            Products.banner_type == banner_type).all()
        return [product_name[0] for product_name in product_names]
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}')
        return []


class Cart(Base):
    """
    –¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ (–Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞)
    """
    __tablename__ = 'cart'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, nullable=False)
    product_id = Column(Integer, ForeignKey('products.id'), nullable=False)
    quantity = Column(Integer, default=1)
    item = relationship('Products')


async def add_data_in_cart_table(product_name: str, callback_message: CallbackQuery):
    new_product = session.query(Products).filter_by(
        product_name=product_name).first()
    if new_product:
        new_cart = (
            session.query(Cart).filter_by(
                user_id=callback_message.from_user.id,
                product_id=new_product.id
            )
            .first()
        )
        if new_cart:
            new_cart.quantity += 1
        else:
            new_cart = Cart(
                user_id=callback_message.from_user.id,
                product_id=new_product.id,
                quantity=1
            )
            session.add(new_cart)
        session.commit()
        await callback_message.message.answer(f'–¢–æ–≤–∞—Ä\n"<b>{product_name}</b>"\n–¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
    else:
        await callback_message.message.answer('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.')

    await callback_message.answer(text='üéâ')


async def clear_cart_table():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã cart.
    """
    try:
        session.query(Cart).delete()  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Cart
        session.commit()  # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        print("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    except OperationalError as e:
        session.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã': {e}")
    finally:
        session.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
